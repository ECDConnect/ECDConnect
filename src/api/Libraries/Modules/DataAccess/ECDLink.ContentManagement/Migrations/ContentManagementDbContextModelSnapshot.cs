// <auto-generated />
using System;
using ECDLink.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ECDLink.ContentManagement.Migrations
{
    [DbContext(typeof(ContentManagementDbContext))]
    partial class ContentManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ContentStatus");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaData")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ContentType");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("DataLinkName")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<int>("FieldOrder")
                        .HasColumnType("integer");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("ContentTypeField");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentValue", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("integer");

                    b.Property<int>("ContentTypeFieldId")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ContentId", "ContentTypeFieldId", "LocaleId");

                    b.HasIndex("ContentTypeFieldId");

                    b.HasIndex("StatusId");

                    b.ToTable("ContentValue");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssemblyDataType")
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GraphQLDataType")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ContentFieldType");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.Content", b =>
                {
                    b.HasOne("ECDLink.ContentManagement.Entities.ContentType", "ContentType")
                        .WithMany("Content")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentTypeField", b =>
                {
                    b.HasOne("ECDLink.ContentManagement.Entities.ContentType", null)
                        .WithMany("Fields")
                        .HasForeignKey("ContentTypeId");

                    b.HasOne("ECDLink.ContentManagement.Entities.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentValue", b =>
                {
                    b.HasOne("ECDLink.ContentManagement.Entities.Content", "Content")
                        .WithMany("ContentValues")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECDLink.ContentManagement.Entities.ContentTypeField", "ContentTypeField")
                        .WithMany()
                        .HasForeignKey("ContentTypeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECDLink.ContentManagement.Entities.ContentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Content");

                    b.Navigation("ContentTypeField");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.Content", b =>
                {
                    b.Navigation("ContentValues");
                });

            modelBuilder.Entity("ECDLink.ContentManagement.Entities.ContentType", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
